//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfClientWfTempConversion.ReferenceTempConversion {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Conversion", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceTempConversion")]
    [System.SerializableAttribute()]
    public partial class Conversion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime dateAppelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string machineNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double valeurField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime dateAppel {
            get {
                return this.dateAppelField;
            }
            set {
                if ((this.dateAppelField.Equals(value) != true)) {
                    this.dateAppelField = value;
                    this.RaisePropertyChanged("dateAppel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string machineName {
            get {
                return this.machineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.machineNameField, value) != true)) {
                    this.machineNameField = value;
                    this.RaisePropertyChanged("machineName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double valeur {
            get {
                return this.valeurField;
            }
            set {
                if ((this.valeurField.Equals(value) != true)) {
                    this.valeurField = value;
                    this.RaisePropertyChanged("valeur");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReferenceTempConversion.IServiceConversion")]
    public interface IServiceConversion {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceConversion/ConvertirVersCelcius", ReplyAction="http://tempuri.org/IServiceConversion/ConvertirVersCelciusResponse")]
        double ConvertirVersCelcius(double temp, string userName, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceConversion/ConvertirVersCelcius", ReplyAction="http://tempuri.org/IServiceConversion/ConvertirVersCelciusResponse")]
        System.Threading.Tasks.Task<double> ConvertirVersCelciusAsync(double temp, string userName, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceConversion/ConvertirVersFarh", ReplyAction="http://tempuri.org/IServiceConversion/ConvertirVersFarhResponse")]
        double ConvertirVersFarh(double temp, string userName, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceConversion/ConvertirVersFarh", ReplyAction="http://tempuri.org/IServiceConversion/ConvertirVersFarhResponse")]
        System.Threading.Tasks.Task<double> ConvertirVersFarhAsync(double temp, string userName, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceConversion/GetAll", ReplyAction="http://tempuri.org/IServiceConversion/GetAllResponse")]
        WcfClientWfTempConversion.ReferenceTempConversion.Conversion[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceConversion/GetAll", ReplyAction="http://tempuri.org/IServiceConversion/GetAllResponse")]
        System.Threading.Tasks.Task<WcfClientWfTempConversion.ReferenceTempConversion.Conversion[]> GetAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceConversionChannel : WcfClientWfTempConversion.ReferenceTempConversion.IServiceConversion, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceConversionClient : System.ServiceModel.ClientBase<WcfClientWfTempConversion.ReferenceTempConversion.IServiceConversion>, WcfClientWfTempConversion.ReferenceTempConversion.IServiceConversion {
        
        public ServiceConversionClient() {
        }
        
        public ServiceConversionClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceConversionClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceConversionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceConversionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double ConvertirVersCelcius(double temp, string userName, string machineName) {
            return base.Channel.ConvertirVersCelcius(temp, userName, machineName);
        }
        
        public System.Threading.Tasks.Task<double> ConvertirVersCelciusAsync(double temp, string userName, string machineName) {
            return base.Channel.ConvertirVersCelciusAsync(temp, userName, machineName);
        }
        
        public double ConvertirVersFarh(double temp, string userName, string machineName) {
            return base.Channel.ConvertirVersFarh(temp, userName, machineName);
        }
        
        public System.Threading.Tasks.Task<double> ConvertirVersFarhAsync(double temp, string userName, string machineName) {
            return base.Channel.ConvertirVersFarhAsync(temp, userName, machineName);
        }
        
        public WcfClientWfTempConversion.ReferenceTempConversion.Conversion[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<WcfClientWfTempConversion.ReferenceTempConversion.Conversion[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
    }
}
